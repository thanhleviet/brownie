\documentclass{article}

\usepackage{natbib}
\usepackage{graphics}
\usepackage{amsmath}
\usepackage{indentfirst}
\usepackage[utf8]{inputenc}
\usepackage[usenames,dvipsnames]{color}
\usepackage[colorlinks=true,urlcolor=blue,linkcolor=red,bookmarks=true]{hyperref}

\DeclareMathOperator{\var}{var}
\DeclareMathOperator{\cov}{cov}

%\VignettePackage{RBrownie}
%\VignetteIndexEntry{RBrownie User's Guide}

\begin{document}

<<meta,include=FALSE,echo=FALSE>>=
options(keep.source = TRUE, width = 60)
meta <- packageDescription("RBrownie")
@

\title{RBrownie User's Guide (Version \Sexpr{meta$Version})}
\author{J. Conrad Stack with credit due to others(1)}
\maketitle

\section{Brief Introduction to Brownie}

\verb@RBrownie@ is an R package which is constructed around the C++ command-line program \href{http://www.brianomeara.info/brownie}{Brownie} (available \href{code.google.com/p/brownie}{here}) designed by Brian O'Meara to estimate and compare rates and means of character evolution in different parts of a phylogeny \citep*{brau}.  More specifically, the original Brownie function was a censored rate test under Brownian motion, which allows the comparison of the rates of evolution (under brownian motion) across two monophyletic sister-clades or between a monophyletic and paraphyletic clade.  This analysis allows you to answer questions about differences in the evolutionary rate of two distinct clades (e.g. large subspecies vs. small subspecies).

As Brownie has grown, more, related analyses have been added.  Now you can perform non-censored ratetests and discrete character reconstructions.  The former allows you to compare the rates (Brownian motion model) or means (Ornstein-Uhlenbeck model) of evolution in different character states that are mapped (or painted) onto the phylogeny.  For example, say you had a tree with binary characters mapped onto it branches indicating whether or not ancestors along that branch were thought to have or not have a certain trait and you also had morphological data for all the taxa present in the tree (the tips).  Using a model-testing approach, Brownie allows to you statistically assess whether or not that binary trait might have significantly influence the rate of evolution of the morphological characteristic measured (or set of morphological characteristics).  Brownie also performs discrete ancestral state evolution (maximum likelihood approach), in order to get the branch-annotated trees which are used in non-censored rate tests.  

Examples of the sort of analyses available in \verb@RBrownie@ are shown and described in detail below, so don't worry if this does not make sense yet.  There is also a fairly technical explaination of the data types found in \verb@RBrownie@ which it uses to handle, manipulate, and visualize phylogenetic data and test results and instructions on how to create your own custom analyses.

\subsection{How to run}

Over it's lifetime Brownie has evolved from a MATLAB module into a command-line executable available to anyone.  In it's current iteration, Brownie 2.0, is available in \href{http://code.google.com/p/brownie/downloads/list}{executable form} for Macintosh operating systems and as \href{http://code.google.com/p/brownie/downloads/list}{source code} which can be installed onto most other operating systems using gcc and the GSL.  

\subsection{Input / Output}

The brownie command-line program is very similar in look, feel, and structure to command-line PAUP*.  It reads NEXUS-formatted files including, like PAUP*, a special (optional) nexus block, 'BROWNIE', which holds a list of the commands to be executed by the program itself.  This is noteworthy because \verb@RBrownie@ reads and writes these specialized nexus files and any files that \verb@RBrownie@ outputs should be directly executable by the Brownie command-line program.

\subsection{More information}

Brownie has a large number of function in addition to the rate tests described above that we encourage you to check out.  This will allow you to exploit all the useful functions Brownie (and by extension \verb@RBrownie@) have to offer.  the manual for Brownie can be found \href{http://www.brianomeara.info/brownie/manual}{here}.


\section{RBrownie}

It was mentioned before that RBrownie is an R shell for the brownie program described above.  This is indeed the case.  Using the \verb@Rcpp@ package, RBrownie links R with the exact same Brownie code that is used in the Brownie command line program.  It simply builds brownie as a static library and automates the piping and execution of strings that would normally be entered at the Brownie programs command line.  This is the reason that the \texttt{brownie} S4 class has a slots for "commands" (more on this later).  At it's heart, RBrownie simply takes all the information from a \texttt{brownie} object, writes it to a file, and then executes it using Brownie.  

Of course to be able to process specially formatted nexus files and manipulate their contents from within R, RBrownie had to extend R's already rich phylogenetic toolkit with a number of data structures and methods.  It literally extends a number of classes and methods from \verb@phylobase@, an R package, it could be said, on which RBrownie is based.  Loading the RBrownie package should show you a list of all the packages on which it is based.

<<LoadIn, eval=false,echo=true>>=
require(RBrownie)
@

\subsection{Reading nexus files}

Nexus files can be read into R using a number of packages. \verb@ape@ and \verb@phylobase@ both include the functionality to read in tree and sequence data, while phylobase also reads CHARACTERS blocks.  For more information on the options presented by these too packages, check out their documentation files:

<<HelpNexus, eval=false,echo=true>>=
?read.nexus 		# ape
?read.nexus.data  	# ape
?readNexus  		# phylobase
@

However, Brownie uses nexus blocks beyond those supported by \verb@ape@ and \verb@phylobase@ and so \verb@RBrownie@ extends the methods from these two packages to accomadate.  For example, Brownie uses an ASSUMPTIONS block to define subsets of the taxa which can be used in its various rate tests.  It also uses a BROWNIE block to store a list of brownie commands to be run automatically if the file is "executed" within the Brownie environment (this is similar to how PAUP* executes files).  So, RBrownie has it's own functions for reading and writing nexus files with these special blocks, \texttt{readBrownie} and \texttt{writeBrownie}.

To illustrate how they work we'll use the parrot dataset which is included with RBrownie (NOTE: you need to have write access to the directory you are in to run this example).

<<InOutDemo, eval=false,echo=true>>=
data(parrot)  
writeBrownie(parrot,file="parrotdata.nex")
newparrot = readBrownie("parrotdata.nex")
@

The two objects \texttt{parrot} and \texttt{newparrot} should be indentical.  It would also be instructive to open the parrotdata.nex file to see how RBrownie writes ASSUMPTIONS blocks, but this isn't necessary.  You may have noticed that \texttt{parrot} and \texttt{newparrot} are both of class \texttt{list}.  

<<HelpNexus, eval=false,echo=true>>=
class(parrot)
class(parrot[[1]])
@

This is because when multiple trees are found in a single nexus file, RBrownie represents them as a list of objects which all are of class \texttt{brownie} - these objects are discussed in the next section.  

\subsection{Classes in RBrownie}

At it's core RBrownie is built around two major classes, \texttt{phylo4d\_ext} and \texttt{brownie}, which both extend \texttt{phylo4d} from phylobase.  In fact, \texttt{phylo4d\_ext} extends \texttt{phylo4d} and \texttt{brownie} extends \texttt{phylo4d\_ext}.  In non-computer-ese this mean that \texttt{phylo4d\_ext} adds a few new data containers (or "slots" as they are known in the S4 world) and \texttt{brownie} adds a few new data containers to \texttt{phylo4d\_ext}.  To illustrate this, look at the R code below, it shows the new slots that are added to \texttt{phylo4d\_ext}.

<<SeeClasses, eval=false,echo=true>>=
phylo4d_slots = names(getSlots("phylo4d"))
phylo4d_ext_slots = names(getSlots("phylo4d_ext"))
brownie_slots = names(getSlots("brownie"))

phylo4d_slots

setdiff(phylo4d_ext_slots,phylo4d_slots)

setdiff(brownie_slots,phylo4d_ext_slots)
@


\begin{thebibliography}{}

\bibitem[Bodega Phylogenetics Wiki (2010)]{phylo}
Price, S., Wainwright, P. (2010). Testing for different rates of continuous trait evolution using likelihood. (http://bodegaphylo.wikispot.org/Morphological\_Diversification\_and\_Rates\_of\_Evolution)


\bibitem[O'Meara, et al.(2006)]{brau}
O'Meara, B. C., Ane, C., Sanderson, M. J. and Wainwright, P. C. (2006). 
\newblock Testing for different rates of continuous trait evolution using likelihood. 
\newblock In \emph{Evolution}, 60 ,922--933.


\end{thebibliography}



\end{document}